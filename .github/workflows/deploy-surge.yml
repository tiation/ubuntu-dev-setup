name: Deploy to Surge - tiation-ubuntu-dev

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  SURGE_DOMAIN: 'tiation-ubuntu-dev.surge.sh'
  PROJECT_TYPE: 'setup-guide'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run security audit
        run: |
          npm audit --audit-level=high
          
  build-and-test:
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run tests
        run: npm run test
        
      - name: Build application
        run: npm run build:prod
        env:
          NODE_ENV: production
          PROJECT_TYPE: ${{ env.PROJECT_TYPE }}
          
      - name: Run security scan
        run: npm run security-scan
        continue-on-error: true
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/
          
      - name: Deploy to Surge
        run: |
          npm install -g surge
          surge ./dist ${{ env.SURGE_DOMAIN }} --token ${{ secrets.SURGE_TOKEN }}
        env:
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
          
      - name: Wait for deployment
        run: sleep 30
        
      - name: Health check
        run: |
          curl -f https://${{ env.SURGE_DOMAIN }}/health || echo "Health check failed"
          
      - name: Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
      - name: Performance test
        run: npm run performance-test
        continue-on-error: true
        
  deploy-preview:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/
          
      - name: Deploy preview to Surge
        run: |
          npm install -g surge
          PREVIEW_DOMAIN="${{ env.SURGE_DOMAIN }}-pr-${{ github.event.number }}.surge.sh"
          surge ./dist $PREVIEW_DOMAIN --token ${{ secrets.SURGE_TOKEN }}
          echo "PREVIEW_URL=https://$PREVIEW_DOMAIN" >> $GITHUB_ENV
        env:
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
          
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = process.env.PREVIEW_URL;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Preview deployed successfully!**

📱 **Preview URL:** ${previewUrl}
🔗 **Main Site:** https://${{ env.SURGE_DOMAIN }}
🏗️ **Project Type:** ${{ env.PROJECT_TYPE }}

**Features:**
- setup-automation
- documentation
- script-generation
- environment-management

*This preview will be automatically cleaned up when the PR is merged.*`
            });
